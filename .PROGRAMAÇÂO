import pygame
import sys
import random

# Inicializar o Pygame
pygame.init()

# Definições de cores
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Dimensões da tela
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('The Duck')

# Carregar e tocar a música de fundo
pygame.mixer.music.load("musica.mp3")
pygame.mixer.music.play(-1)  # -1 para tocar em loop

# Função para carregar e redimensionar imagens
def carregar_imagem(nome, largura=None, altura=None):
    try:
        imagem = pygame.image.load(nome)
        if largura and altura:
            imagem = pygame.transform.scale(imagem, (largura, altura))
        return imagem
    except pygame.error as e:
        print(f"Não foi possível carregar a imagem: {e}")
        sys.exit()

# Variáveis globais para o sistema de vidas
vidas = 3
vida_imagem = carregar_imagem("vida.png", 30, 30)  # Redimensionar para caber no canto da tela
invulneravel = False  # Estado de invulnerabilidade
tempo_invulneravel = 0  # Temporizador para o estado de invulnerabilidade

def reiniciar_jogo():
    global pos_x, pos_y, cobra_pos, gnu_pos, hipopotamo_pos, girafa_pos, elefante_pos
    global cobra_velocidade, gnu_velocidade, hipopotamo_velocidade, girafa_velocidade, elefante_velocidade
    global vidas, invulneravel, tempo_invulneravel

    # Reiniciar posições e velocidades dos personagens
    pos_x, pos_y = 400, 300
    cobra_pos = [800, 100]
    gnu_pos = [900, 200]
    hipopotamo_pos = [1000, 300]
    girafa_pos = [1100, 400]
    elefante_pos = [1200, 500]
    cobra_velocidade = 4.5
    gnu_velocidade = 3.5
    hipopotamo_velocidade = 3
    girafa_velocidade = 3
    elefante_velocidade = 2

    # Reiniciar vidas e estado de invulnerabilidade
    vidas = 3
    invulneravel = False
    tempo_invulneravel = 0

    tela_inicio()

# Carregar imagens de fundo e do pato
background_inicio = carregar_imagem("background.png", SCREEN_WIDTH, SCREEN_HEIGHT)
background_comandos = carregar_imagem("comandos.png", SCREEN_WIDTH, SCREEN_HEIGHT)
background_jogo = carregar_imagem("fundo.png", SCREEN_WIDTH, SCREEN_HEIGHT)
pato_parado = carregar_imagem("Pato_parado.png", 40, 40)

# Animações do pato
pato_cima = [carregar_imagem(f'Pato_cima_{i}.png', 40, 40) for i in range(1, 4)]
pato_baixo = [carregar_imagem(f'Pato_baixo_{i}.png', 40, 40) for i in range(1, 4)]
pato_esquerda = [carregar_imagem(f'Pato_esquerda_{i}.png', 40, 40) for i in range(1, 7)]
pato_direita = [carregar_imagem(f'Pato_direita_{i}.png', 40, 40) for i in range(1, 7)]

# Carregar animações dos personagens
cobra_frames = [carregar_imagem("Cobra_1.png", 100, 70), carregar_imagem("Cobra_2.png", 100, 70)]
elefante_frames = [carregar_imagem("Elefante_1.png", 160, 80), carregar_imagem("Elefante_2.png", 160, 80)]
gnu_frames = [carregar_imagem("Gnu_1.png", 200, 90), carregar_imagem("Gnu_2.png", 200, 90)]
hipopotamo_frames = [carregar_imagem("Hipopotamo_1.png", 180, 80), carregar_imagem("Hipopotamo_2.png", 180, 80)]
girafa_frames = [carregar_imagem("Girafa_1.png", 160, 80), carregar_imagem("Girafa_2.png", 160, 80)]

global cobra_velocidade, gnu_velocidade, hipopotamo_velocidade, girafa_velocidade, elefante_velocidade
# Defina as velocidades para os valores iniciais ao reiniciar
cobra_velocidade = 2
gnu_velocidade = 3
hipopotamo_velocidade = 1.5
girafa_velocidade = 2.5
elefante_velocidade = 1.8
# Variáveis de posição, velocidade e índices de animação
pos_x = SCREEN_WIDTH // 2
pos_y = SCREEN_HEIGHT // 2
velocidade_pato = 5
direcao = "parado"
indice_animacao = 0
clock = pygame.time.Clock()

# Variáveis de movimento e animação dos personagens
cobra_pos = [SCREEN_WIDTH, SCREEN_HEIGHT // 2]
cobra_velocidade = 4.5
cobra_index = 0

gnu_pos = [SCREEN_WIDTH, SCREEN_HEIGHT // 3]
gnu_velocidade = 3.5
gnu_index = 0

hipopotamo_pos = [SCREEN_WIDTH, SCREEN_HEIGHT // 4]
hipopotamo_velocidade = 3
hipopotamo_index = 0

girafa_pos = [-140, SCREEN_HEIGHT // 2]
girafa_velocidade = 3
girafa_index = 0

elefante_pos = [-140, SCREEN_HEIGHT // 1.5]
elefante_velocidade = 2
elefante_index = 0

# Função para desenhar botões
def create_button(text, font, color, x, y, width, height):
    button_rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(screen, color, button_rect, 2)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect(center=button_rect.center)
    screen.blit(text_surface, text_rect)
    return button_rect

# Função para animar o pato
def animar_pato(direcao):
    global indice_animacao
    if direcao == "cima":
        frames = pato_cima
    elif direcao == "baixo":
        frames = pato_baixo
    elif direcao == "esquerda":
        frames = pato_esquerda
    elif direcao == "direita":
        frames = pato_direita
    else:
        frames = [pato_parado]

    frame = frames[indice_animacao // 10 % len(frames)]
    screen.blit(frame, (pos_x, pos_y))
    indice_animacao += 1

def exibir_vidas():
    """Desenha as imagens das vidas no canto direito da tela com base no número de vidas restantes."""
    for i in range(vidas):
        screen.blit(vida_imagem, (SCREEN_WIDTH - (i + 1) * 50, 10))  # Ajuste o espaçamento conforme necessário


# Função para animar e mover os personagens da direita para a esquerda
def animar_personagens_esquerda():
    global cobra_index, gnu_index, hipopotamo_index

    cobra_pos[0] -= cobra_velocidade
    gnu_pos[0] -= gnu_velocidade
    hipopotamo_pos[0] -= hipopotamo_velocidade

    if cobra_pos[0] < -140:
        cobra_pos[0] = SCREEN_WIDTH
        cobra_pos[1] = random.randint(50, SCREEN_HEIGHT - 50)  # Novo Y aleatório
    if gnu_pos[0] < -140:
        gnu_pos[0] = SCREEN_WIDTH
        gnu_pos[1] = random.randint(50, SCREEN_HEIGHT - 50)  # Novo Y aleatório
    if hipopotamo_pos[0] < -140:
        hipopotamo_pos[0] = SCREEN_WIDTH
        hipopotamo_pos[1] = random.randint(50, SCREEN_HEIGHT - 50)  # Novo Y aleatório

    screen.blit(cobra_frames[cobra_index // 10 % len(cobra_frames)], cobra_pos)
    screen.blit(gnu_frames[gnu_index // 10 % len(gnu_frames)], gnu_pos)
    screen.blit(hipopotamo_frames[hipopotamo_index // 10 % len(hipopotamo_frames)], hipopotamo_pos)
    cobra_index += 1
    gnu_index += 1
    hipopotamo_index += 1

# Função para animar e mover os personagens da esquerda para a direita
def animar_personagens_direita():
    global girafa_index, elefante_index

    girafa_pos[0] += girafa_velocidade
    elefante_pos[0] += elefante_velocidade

    if girafa_pos[0] > SCREEN_WIDTH:
        girafa_pos[0] = -140
        girafa_pos[1] = random.randint(50, SCREEN_HEIGHT - 50)  # Novo Y aleatório
    if elefante_pos[0] > SCREEN_WIDTH:
        elefante_pos[0] = -140
        elefante_pos[1] = random.randint(50, SCREEN_HEIGHT - 50)  # Novo Y aleatório

    screen.blit(girafa_frames[girafa_index // 10 % len(girafa_frames)], girafa_pos)
    screen.blit(elefante_frames[elefante_index // 10 % len(elefante_frames)], elefante_pos)
    girafa_index += 1
    elefante_index += 1

# Função para detectar colisão entre o pato e os personagens
def detectar_colisao():
    global vidas, invulneravel, tempo_invulneravel

    # Não verificar colisões se estiver invulnerável
    if invulneravel:
        return

    pato_rect = pygame.Rect(pos_x, pos_y, 40, 40)

    # Ajuste das áreas de colisão para cada personagem
    cobra_rect = pygame.Rect(cobra_pos[0] + 20, cobra_pos[1] + 20, 60, 30)
    gnu_rect = pygame.Rect(gnu_pos[0], gnu_pos[1], 200, 90)
    hipopotamo_rect = pygame.Rect(hipopotamo_pos[0], hipopotamo_pos[1], 180, 80)
    girafa_rect = pygame.Rect(girafa_pos[0], girafa_pos[1], 160, 80)
    elefante_rect = pygame.Rect(elefante_pos[0], elefante_pos[1], 160, 80)

    # Checar colisão com cada animal
    if pato_rect.colliderect(cobra_rect) or pato_rect.colliderect(gnu_rect) or \
       pato_rect.colliderect(hipopotamo_rect) or pato_rect.colliderect(girafa_rect) or \
       pato_rect.colliderect(elefante_rect):
        vidas -= 1
        if vidas <= 0:
            tela_tente_novamente()
        else:
            invulneravel = True
            tempo_invulneravel = pygame.time.get_ticks()  # Registrar o momento da colisão

# Função para exibir a tela "Tente novamente"
def tela_tente_novamente():
    perdeu_imagem = carregar_imagem("Perdeu.png", SCREEN_WIDTH, SCREEN_HEIGHT)  # Carregar imagem de fundo
    screen.blit(perdeu_imagem, (0, 0))

    # Botão "Recomeçar"
    fonte_botao = pygame.font.Font(None, 80)
    texto_botao = fonte_botao.render("Recomeçar", True, BLACK)
    botao_rect = texto_botao.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 1.7))
    pygame.draw.rect(screen, WHITE, botao_rect, 0)  # Fundo preto para contraste
    screen.blit(texto_botao, botao_rect.topleft)

    pygame.display.flip()

    esperando = True
    while esperando:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif evento.type == pygame.MOUSEBUTTONDOWN:
                if botao_rect.collidepoint(evento.pos):
                    reiniciar_jogo()
                    esperando = False

# Função para desenhar o texto na tela
def draw_text(text, font, color, surface, x, y):
    text_obj = font.render(text, True, color)
    text_rect = text_obj.get_rect(center=(x, y))
    surface.blit(text_obj, text_rect)

# Função para exibir a tela inicial
def tela_inicio():
    font = pygame.font.Font(None, 40)
    button_start = create_button("START", font, BLACK, 300, 300, 200, 50)
    button_comandos = create_button("COMANDOS", font, BLACK, 300, 370, 200, 50)
    button_exit = create_button("EXIT", font, BLACK, 300, 440, 200, 50)

    while True:
        screen.blit(background_inicio, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if button_start.collidepoint(event.pos):
                    jogo()
                elif button_comandos.collidepoint(event.pos):
                    tela_comandos()
                elif button_exit.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

        create_button("START", font, WHITE, 300, 300, 200, 50)
        create_button("COMANDOS", font, WHITE, 300, 370, 200, 50)
        create_button("EXIT", font, WHITE, 300, 440, 200, 50)
        pygame.display.flip()

# Função para exibir a tela de comandos
def tela_comandos():
    while True:
        screen.blit(background_comandos, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    tela_inicio()

        pygame.display.flip()

def limitar_movimento():
    global pos_x, pos_y
    if pos_x < 0:
        pos_x = 0
    elif pos_x > SCREEN_WIDTH - 40:  # Considera a largura do pato
        pos_x = SCREEN_WIDTH - 40
    if pos_y < 0:
        pos_y = 0
    elif pos_y > SCREEN_HEIGHT - 40:  # Considera a altura do pato
        pos_y = SCREEN_HEIGHT - 40       

def aumentar_velocidade_personagens():
    global cobra_velocidade, gnu_velocidade, hipopotamo_velocidade, girafa_velocidade, elefante_velocidade
    cobra_velocidade *= 1.3
    gnu_velocidade *= 1.3
    hipopotamo_velocidade *= 1.3
    girafa_velocidade *= 1.3
    elefante_velocidade *= 1.3

# Função principal do jogo
def jogo():
    global pos_x, pos_y, direcao, indice_animacao, invulneravel, tempo_invulneravel

    pygame.time.set_timer(pygame.USEREVENT + 1, 3000)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.USEREVENT + 1:
                aumentar_velocidade_personagens()

        # Checar se o tempo de invulnerabilidade terminou
        if invulneravel and pygame.time.get_ticks() - tempo_invulneravel >= 2000:
            invulneravel = False

        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP] and pos_y > 0:
            pos_y -= velocidade_pato
            direcao = "cima"
        elif keys[pygame.K_DOWN] and pos_y < SCREEN_HEIGHT - 40:
            pos_y += velocidade_pato
            direcao = "baixo"
        elif keys[pygame.K_LEFT] and pos_x > 0:
            pos_x -= velocidade_pato
            direcao = "esquerda"
        elif keys[pygame.K_RIGHT] and pos_x < SCREEN_WIDTH - 40:
            pos_x += velocidade_pato
            direcao = "direita"
        else:
            direcao = "parado"

        screen.blit(background_jogo, (0, 0))
        animar_pato(direcao)
        animar_personagens_esquerda()
        animar_personagens_direita()
        detectar_colisao()

        # Exibir as vidas no canto direito
        exibir_vidas()

        pygame.display.flip()
        clock.tick(30)

# Continuar com o restante do código sem alterações
tela_inicio()
